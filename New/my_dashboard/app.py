import streamlit as st
import pandas as pd
import plotly.express as px
import json
import os
import re
import datetime

from streamlit.runtime.scriptrunner import RerunException
from streamlit.runtime.scriptrunner import get_script_run_ctx
def rerun():
    raise RerunException(get_script_run_ctx())

# ==== ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÑ‡∏ü‡∏•‡πå users.json ====
USER_FILE = "users.json"
if not os.path.exists(USER_FILE):
    with open(USER_FILE, "w") as f:
        json.dump({}, f)

def load_users():
    with open(USER_FILE, "r") as f:
        return json.load(f)

def save_users(users):
    with open(USER_FILE, "w") as f:
        json.dump(users, f, indent=2)

# ==== ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ log ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î ====
LOG_FILE = "upload_log.json"
def load_upload_log():
    if not os.path.exists(LOG_FILE):
        with open(LOG_FILE, "w") as f:
            json.dump({}, f)
    with open(LOG_FILE, "r") as f:
        return json.load(f)

def save_upload_log(log):
    with open(LOG_FILE, "w") as f:
        json.dump(log, f, indent=2)

def add_upload_log(username, filename):
    log = load_upload_log()
    entry = {
        "filename": filename,
        "upload_time": datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    }
    if username not in log:
        log[username] = []
    log[username].append(entry)
    save_upload_log(log)

# ==== ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô (‡∏Ñ‡∏∑‡∏ô username) ====
def check_login(identifier, password):
    users = load_users()
    for username, info in users.items():
        if isinstance(info, dict):
            if identifier == username or identifier == info.get("email"):
                if info.get("password") == password:
                    return username
        else:
            if identifier == username and info == password:
                return username
    return None

# ==== ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å ====
def signup(username, email, password):
    users = load_users()
    if username in users:
        return False
    users[username] = {"email": email, "password": password}
    save_users(users)
    return True

def is_valid_email(email):
    return re.match(r"[^@]+@[^@]+\.[^@]+", email)

# ==== ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô session_state ====
if "logged_in" not in st.session_state:
    st.session_state.logged_in = False
if "page" not in st.session_state:
    st.session_state.page = "login"
if "username" not in st.session_state:
    st.session_state.username = None

# ==== CSS ‡πÑ‡∏Æ‡πÇ‡∏ã‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£ ====
st.markdown("""
<style>
@import url('https://fonts.googleapis.com/css2?family=Sarabun:wght@400;600&display=swap');
body, .main {
    font-family: 'Sarabun', sans-serif;
    background: #f8f9fa;
    color: #1c1c1c;
}
.main > div {
    background-color: #fff;
    border-radius: 12px;
    padding: 2rem 3rem;
    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.05);
    margin-top: 30px;
}
h1, h2, h3, .stSubheader {
    color: #002147;
    font-weight: 600;
    margin-bottom: 1rem;
    text-align: center;
}
.stButton > button {
    background-color: #004080;
    color: white;
    border-radius: 8px;
    padding: 0.5rem 1.25rem;
    font-weight: 600;
    border: none;
    transition: all 0.3s ease;
}
.stButton > button:hover {
    background-color: #002f5f;
    transform: scale(1.02);
}
.logout-btn {
    position: fixed;
    top: 20px;
    right: 20px;
    background-color: #dc3545;
    color: #fff;
    padding: 0.5rem 1.25rem;
    font-weight: 600;
    border: none;
    border-radius: 8px;
    font-size: 0.95rem;
    z-index: 999;
    box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
    transition: background-color 0.3s ease;
}
.logout-btn:hover {
    background-color: #b02a37;
}
.card {
    background: #ffffff;
    padding: 1.5rem;
    border-radius: 12px;
    box-shadow: 0 2px 10px rgba(0,0,0,0.04);
    margin-top: 1.5rem;
}
</style>
""", unsafe_allow_html=True)

# ==== ‡∏´‡∏ô‡πâ‡∏≤ LOGIN / SIGNUP ====
if not st.session_state.logged_in:
    # ‡πÅ‡∏™‡∏î‡∏á‡πÇ‡∏•‡πÇ‡∏Å‡πâ + ‡∏ä‡∏∑‡πà‡∏≠‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏´‡∏ô‡πâ‡∏≤ login/signup ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
    st.markdown("""
    <div style='display: flex; align-items: center; gap: 1rem; margin-bottom: 2rem; background-color: #ffffff; padding: 1rem 2rem; border-radius: 12px; box-shadow: 0 2px 10px rgba(0,0,0,0.05);'>
        <img src='https://www.cpa.go.th/cpawebsite/uploads/ABH-LOGO-GEEEN.png' style='height: 70px;'>
        <div>
            <h1 style='margin: 0; color: #002147; font-size: 1.8rem;'>‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•</h1>
            <p style='margin: 0; color: #666;'>‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•‡πÄ‡∏à‡πâ‡∏≤‡∏û‡∏£‡∏∞‡∏¢‡∏≤‡∏≠‡∏†‡∏±‡∏¢‡∏†‡∏π‡πÄ‡∏ö‡∏®‡∏£</p>
        </div>
    </div>
    """, unsafe_allow_html=True)

    col1, col2, col3 = st.columns([1, 2, 1])
    with col2:
        if st.session_state.page == "login":
            st.markdown("<h2 style='text-align:center; color:#4a90e2;'>üîê ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö</h2>", unsafe_allow_html=True)
            with st.form("login_form"):
                identifier = st.text_input("üë§ ‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏´‡∏£‡∏∑‡∏≠‡∏≠‡∏µ‡πÄ‡∏°‡∏•", placeholder="‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ‡∏´‡∏£‡∏∑‡∏≠ ‡∏≠‡∏µ‡πÄ‡∏°‡∏•")
                password = st.text_input("üîí ‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô", type="password", placeholder="‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì")
                submitted = st.form_submit_button("‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö")
            if submitted:
                user = check_login(identifier.strip(), password.strip())
                if user:
                    st.session_state.logged_in = True
                    st.session_state.username = user
                    st.success("‚úÖ ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
                    rerun()
                else:
                    st.error("‚ùå ‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")
            if st.button("üìå ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å"):
                st.session_state.page = "signup"
                rerun()

        elif st.session_state.page == "signup":
            st.markdown("<h2 style='text-align:center; color:#4a90e2;'>üìù ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÉ‡∏´‡∏°‡πà</h2>", unsafe_allow_html=True)
            with st.form("signup_form"):
                new_user = st.text_input("üë§ ‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ", placeholder="‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£")
                new_email = st.text_input("üìß ‡∏≠‡∏µ‡πÄ‡∏°‡∏•", placeholder="example@mail.com")
                new_pass = st.text_input("üîí ‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô", type="password", placeholder="‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô")
                submitted = st.form_submit_button("‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ö‡∏±‡∏ç‡∏ä‡∏µ")
            if submitted:
                if not new_user or not new_email or not new_pass:
                    st.error("‚ùó ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô")
                elif not is_valid_email(new_email):
                    st.error("üìß ‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")
                elif signup(new_user.strip(), new_email.strip(), new_pass.strip()):
                    st.success("‚úÖ ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö")
                    st.session_state.page = "login"
                    st.experimental_rerun()
                else:
                    st.error("‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß")
            if st.button("‚Üê ‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö"):
                st.session_state.page = "login"
                rerun()
    st.stop()

# ==== ‡∏™‡πà‡∏ß‡∏ô‡∏Ç‡∏≠‡∏á‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö‡∏´‡∏•‡∏±‡∏á login ==== 

# Sidebar ‡πÇ‡∏•‡πÇ‡∏Å‡πâ‡πÅ‡∏•‡∏∞‡πÄ‡∏°‡∏ô‡∏π (‡πÑ‡∏°‡πà‡πÅ‡∏™‡∏î‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏£‡∏∞‡∏ö‡∏ö‡∏ã‡πâ‡∏≥‡πÉ‡∏ô‡∏ô‡∏µ‡πâ)
st.sidebar.markdown("""
<div style='text-align:center; margin-bottom: 1.5rem;'>
    <img src='https://www.cpa.go.th/cpawebsite/uploads/ABH-LOGO-GEEEN.png' width='100' style='margin-bottom: 10px;'/>
</div>
<hr>
""", unsafe_allow_html=True)

menu = st.sidebar.radio("üìå ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏°‡∏ô‡∏π", ["‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏£‡∏Å", "‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏•‡∏∞‡∏Å‡∏£‡∏≤‡∏ü", "‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î"])

st.sidebar.markdown("---")
st.sidebar.markdown(f"üë§ ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ: **{st.session_state.username}**")
if st.sidebar.button("üö™ ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö"):
    st.session_state.logged_in = False
    st.session_state.username = None
    rerun()

if menu == "‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏£‡∏Å":
    st.markdown(f"""
    <h1 style='text-align:center; color:#003366;'>üìä ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÅ‡∏•‡∏∞‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•</h1>
    <p style='text-align:center; font-size: 1.1rem;'>‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏Ñ‡∏∏‡∏ì <strong>{st.session_state.username}</strong> ‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏Ç‡∏≠‡∏á‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•‡πÄ‡∏à‡πâ‡∏≤‡∏û‡∏£‡∏∞‡∏¢‡∏≤‡∏≠‡∏†‡∏±‡∏¢‡∏†‡∏π‡πÄ‡∏ö‡∏®‡∏£</p>
    """, unsafe_allow_html=True)
    st.markdown("<div class='card'>‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏°‡∏ô‡∏π‡∏à‡∏≤‡∏Å‡∏î‡πâ‡∏≤‡∏ô‡∏ã‡πâ‡∏≤‡∏¢‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£ ‡πÄ‡∏ä‡πà‡∏ô ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå ‡∏´‡∏£‡∏∑‡∏≠‡∏î‡∏π‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô</div>", unsafe_allow_html=True)

elif menu == "‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏•‡∏∞‡∏Å‡∏£‡∏≤‡∏ü":
    st.markdown("<div class='card'>", unsafe_allow_html=True)
    st.subheader("üìÇ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ß‡∏±‡∏ô (Excel)")
    uploaded_file = st.file_uploader("", type=["xlsx"])
    st.markdown("</div>", unsafe_allow_html=True)

    if uploaded_file is not None:
        try:
            df = pd.read_excel(uploaded_file)
            st.markdown("<div class='card'>", unsafe_allow_html=True)
            st.subheader("üßæ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå Excel")
            st.dataframe(df, use_container_width=True)
            st.success(f"‚úÖ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå '{uploaded_file.name}' ‡πÄ‡∏™‡∏£‡πá‡∏à‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")
            current_user = st.session_state.get("username", None)
            if current_user:
                add_upload_log(current_user, uploaded_file.name)

            numeric_cols = df.select_dtypes(include='number').columns.tolist()
            non_numeric_cols = df.select_dtypes(exclude='number').columns.tolist()

            if numeric_cols and non_numeric_cols:
                x_col = non_numeric_cols[0]
                y_col = numeric_cols[0]
                filtered_df = df[df[x_col].notnull()]
                if not filtered_df.empty:
                    fig_bar = px.bar(filtered_df, x=x_col, y=y_col, title=f'{y_col} ‡∏ï‡∏≤‡∏° {x_col}', text=y_col, color=x_col)
                    fig_bar.update_traces(textposition='outside')
                    st.plotly_chart(fig_bar, use_container_width=True)

                    fig_pie = px.pie(filtered_df, names=x_col, values=y_col, title=f'‡∏Å‡∏£‡∏≤‡∏ü‡∏ß‡∏á‡∏Å‡∏•‡∏° {y_col} ‡∏ï‡∏≤‡∏° {x_col}')
                    fig_pie.update_traces(textinfo='value+label')
                    st.plotly_chart(fig_pie, use_container_width=True)
                else:
                    st.warning("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏´‡∏•‡∏±‡∏á‡∏Å‡∏£‡∏≠‡∏á null")
            else:
                st.info("‚ÑπÔ∏è ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏ó‡∏±‡πâ‡∏á‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÅ‡∏•‡∏∞‡∏ï‡∏±‡∏ß‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏£‡∏≤‡∏ü")
            st.markdown("</div>", unsafe_allow_html=True)
        except Exception as e:
            st.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")

elif menu == "‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î":
    current_user = st.session_state.get("username", None)
    if current_user:
        log = load_upload_log()
        user_logs = log.get(current_user, [])

        st.markdown("""
        <div class='card'>
            <h2 style='text-align:center; color:#003366;'>üìú ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô</h2>
            <p style='text-align:center; font-size: 1.05rem;'>‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏Ñ‡∏¢‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ß‡∏±‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á</p>
        </div>
        """, unsafe_allow_html=True)

        with st.form("search_form"):
            st.markdown("<div class='card'>", unsafe_allow_html=True)
            st.markdown("### üîé ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î")
            search = st.text_input("‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏´‡∏£‡∏∑‡∏≠‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà (YYYY-MM-DD)", placeholder="‡πÄ‡∏ä‡πà‡∏ô report.xlsx ‡∏´‡∏£‡∏∑‡∏≠ 2025-06-13")
            submitted = st.form_submit_button("‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤")
            st.markdown("</div>", unsafe_allow_html=True)

        # ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Å‡∏£‡∏≠‡∏á
        def filter_logs(logs, keyword):
            return [entry for entry in logs if keyword.lower() in entry['filename'].lower() or keyword in entry['upload_time']]

        # ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
        results = filter_logs(user_logs, search.strip()) if submitted else user_logs

        if results:
            st.markdown("<div class='card'>", unsafe_allow_html=True)
            st.markdown(f"<h4 style='color:#1e88e5;'>‚úÖ ‡∏û‡∏ö {len(results)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ {'‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤' if submitted else '‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î'}</h4>", unsafe_allow_html=True)
            df = pd.DataFrame(results)
            df.index += 1
            df.rename_axis("‡∏•‡∏≥‡∏î‡∏±‡∏ö", inplace=True)
            df.rename(columns={
                "filename": "üìÅ ‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå",
                "upload_time": "‚è∞ ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î"
            }, inplace=True)
            st.dataframe(df, use_container_width=True)

            # ‡∏™‡∏£‡∏∏‡∏õ‡πÑ‡∏ü‡∏•‡πå‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
            last_upload = results[-1]
            st.markdown(f"<p style='color:#4caf50;'>üìå ‡πÑ‡∏ü‡∏•‡πå‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î: <strong>{last_upload['filename']}</strong> ‡πÄ‡∏°‡∏∑‡πà‡∏≠ <strong>{last_upload['upload_time']}</strong></p>", unsafe_allow_html=True)
            st.markdown("</div>", unsafe_allow_html=True)

            # ‡∏õ‡∏∏‡πà‡∏°‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î CSV
            csv = df.to_csv(index=False).encode("utf-8-sig")
            st.download_button(
                label="üì• ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏ü‡∏•‡πå CSV",
                data=csv,
                file_name="upload_history.csv",
                mime="text/csv",
                use_container_width=True,
            )
        else:
            st.markdown("<div class='card'>", unsafe_allow_html=True)
            st.warning("üîç ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤")
            st.markdown("</div>")
